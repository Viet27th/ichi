{"version":3,"file":"static/webpack/static/development/pages/_app.js.6d350fbf0920311c3cb3.hot-update.js","sources":["webpack:///./services/axios.service.js"],"sourcesContent":["import axios from 'axios';\nimport cookie from './cookie.service';\nimport {AlertComponentEvolution} from '../components/alert';\nimport {LoginComponentEvolution} from '../components/login';\nimport Router from 'next/router';\nimport {express_api} from './express_api.service';\n\n/**\n *\n * @param req - if request come from Nextjs server, we've merely pass this params\n * @returns {AxiosInstance}\n */\nexport const axiosInstance = function (req) {\n  let token;\n  if (req) {\n    token = cookie.serverGetCookieByName(req, 'token');\n  } else {\n    token = cookie.clientGetCookieByName('token');\n  }\n  \n  let axiosInstance = axios.create({\n    timeout: 9000\n  });\n  axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  \n  /**\n   * Add a request interceptor to verify before send request\n   * Request never sent if token is invalid\n   */\n  axiosInstance.interceptors.request.use(function (config) {\n    // Hàm này được gọi trước khi request được gửi đi.\n    // Do something before request is sent, if it's ok, you must be return \"config\" otherwise request never be sent\n    \n    let userProfile = cookie.verifyJWT(token);\n  \n    // Token is expired in 7 days, before that 1 day, we will refresh token if user still working on my system.\n    // If user doesn't on my system in 7 days, next time visiting must be login\n    if (userProfile && typeof window !== 'undefined') {\n      if ((userProfile.expMillisecond - Date.now()) < 24 * 60 * 60 * 1000) {\n        axios.post(express_api.webRefreshTokenTraditionalUrl).then(result => {\n          // Set cookie client\n          cookie.clientSetCookie('token', result.data.data.token, result.data.data.expMillisecond);\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }\n    }\n    \n    if (!userProfile && config.url !== express_api.webLoginTraditionalUrl) {\n      // Ném ra 1 lỗi và sẽ được bắt ở catch khi gửi request. Giống như việc request trả về status khác 200.\n      // Catch trong mỗi request sẽ chạy khi status response khác 200,\n      // hoặc then ném ra 1 lỗi, hoặc ở đây (trước khi request) ném ra 1 lỗi\n      // throw new Error('token error');\n      LoginComponentEvolution.show();\n      return;\n    }\n    \n    return config;\n  }, function (error) {\n    // Không biết hàm này trigger khi nào\n    // Do something with request error\n    console.log('axios handle request error: ',error);\n    return Promise.reject(error);\n  });\n  \n  // Add a response interceptor\n  axiosInstance.interceptors.response.use(function (response) {\n    // Hàm này chạy khi có response trả về với status = 200, hàm này chạy trước rồi đến then.\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Hàm này được gọi khi request trả về status khác 200 tức là response lỗi.\n    // Sau khi hàm này chạy, catch mới chạy. Catch cũng bắt lỗi với các response có status khác 200.\n    // Do something with response error\n    return Promise.reject(error);\n  });\n  \n  return axiosInstance;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;;;;;AAIA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}