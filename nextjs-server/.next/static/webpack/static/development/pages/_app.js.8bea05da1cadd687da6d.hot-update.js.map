{"version":3,"file":"static/webpack/static/development/pages/_app.js.8bea05da1cadd687da6d.hot-update.js","sources":["webpack:///./pages/_app.js","webpack:///./services/axios.service.js"],"sourcesContent":["import React from 'react';\nimport App, {Container} from 'next/app';\nimport {AlertComponentEvolution} from '../components/alert';\nimport {ConfirmComponentEvolution} from '../components/confirm';\nimport {SpinnerComponentEvolution} from '../components/spinner';\nimport dynamic from 'next/dynamic';\nimport cookie from '../services/cookie.service';\nimport WrappedUserPagesComponent from '../components/wrapped_user_pages';\n// Component WrappedAdminPagesComponent sẽ chỉ chạy trên client bao gồm cả phần import ở đầu trang\n// That mean: When refresh (F5) Admin page, server does not return HTML\nconst WrappedAdminPagesComponent = dynamic(\n  () => import('../components/wrapped_admin_pages'),\n  {\n    ssr: false\n  }\n);\nimport {axiosInstance} from '../services/axios.service';\nimport {express_api} from '../services/express_api.service';\nimport {Provider} from 'react-redux';\nimport withReduxStore from '../redux_store';\n\nclass MyApp extends App {\n  // In page as login.js, register.js, hell is different with ctx\n  static async getInitialProps(hell) {\n    const {Component, ctx} = hell;\n    let pageProps = {};\n    let userProfile = {};\n    \n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    \n    // userProfile is false if user doesn't logged in before or token expired. Otherwise, userProfile is object contains user data\n    // If userProfile is not false => token is truth. Refresh token before expire.\n    if (ctx.res) {\n      userProfile = cookie.verifyJWT(cookie.serverGetCookieByName(ctx.req, 'token'));\n    } else {\n      userProfile = cookie.verifyJWT(cookie.clientGetCookieByName('token'));\n    }\n    if (userProfile) {\n      hell.ctx.reduxStore.dispatch({\n        type: 'SAVE_USER_INFO',\n        description: 'Save user information when user login successfully.',\n        data: userProfile\n      });\n    }\n    \n    return {pageProps, userProfile};\n  }\n  \n  render() {\n    const {Component, pageProps, userProfile, reduxStore} = this.props;\n    \n    let isAdminPages = (this.props.router.route.startsWith('/admin'));\n    \n    // Token is expired in 8 days, before that 7 day, we will refresh token if user still working on my system.\n    // If user doesn't on my system in 7 days, next time visiting must be login\n    if (userProfile && typeof window !== 'undefined') {\n      if ((userProfile.expMillisecond - Date.now()) < 7 * 24 * 60 * 60 * 1000) {\n        axiosInstance().post(express_api.webRefreshTokenTraditionalUrl).then(result => {\n          // Set cookie client\n          cookie.clientSetCookie('token', result.data.data.token, result.data.data.expMillisecond);\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }\n    }\n    \n    if (isAdminPages) {\n      return (\n        <Container>\n          <Provider store={reduxStore}>\n            <WrappedAdminPagesComponent>\n              <Component {...pageProps}/>\n              <style global jsx>{`\n              body, #__next {\n                min-height: 100vh;\n              }\n              \n              .cursor-pointer {\n                cursor: pointer;\n              }\n              \n              a:hover {\n                text-decoration: none !important;\n              }\n              \n            `}</style>\n            </WrappedAdminPagesComponent>\n          </Provider>\n        </Container>\n      );\n    } else {\n      return (\n        <Container>\n          <Provider store={reduxStore}>\n            <WrappedUserPagesComponent>\n              <Component {...pageProps} />\n              <style global jsx>{`\n              body, #__next {\n                min-height: 100vh;\n              }\n              \n              .cursor-pointer {\n                cursor: pointer;\n              }\n              \n              a:hover {\n                text-decoration: none !important;\n              }\n              \n            `}</style>\n            </WrappedUserPagesComponent>\n          </Provider>\n        </Container>\n      );\n    }\n    \n    \n  }\n}\n\nexport default withReduxStore(MyApp);\n","import axios from 'axios';\nimport cookie from './cookie.service';\nimport {AlertComponentEvolution} from '../components/alert';\nimport {LoginComponentEvolution} from '../components/login';\nimport Router from 'next/router';\nimport {express_api} from './express_api.service';\n\n/**\n *\n * @param req - if request come from Nextjs server, we've merely pass this params\n * @returns {AxiosInstance}\n */\nexport const axiosInstance = function (req) {\n  let token;\n  if (req) {\n    token = cookie.serverGetCookieByName(req, 'token');\n  } else {\n    token = cookie.clientGetCookieByName('token');\n  }\n  \n  let axiosInstance = axios.create({\n    timeout: 9000\n  });\n  axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  \n  /**\n   * Add a request interceptor to verify before send request\n   * Request never sent if token is invalid\n   */\n  axiosInstance.interceptors.request.use(function (config) {\n    // Hàm này được gọi trước khi request được gửi đi.\n    // Do something before request is sent, if it's ok, you must be return \"config\" otherwise request never be sent\n    \n    let userProfile = cookie.verifyJWT(token);\n    \n    // Gọi mội refresh token nếu token của user sắp hết hạn.\n    // Hành động này config ở 2 nơi:\n    // 1: Xảy ra khi gọi request\n    // 2: Xảy ra khi chuyển trang, đã config trong _app.js\n    // Token is expired in 8 days, before that 7 day, we will refresh token if user still working on my system.\n    // If user doesn't on my system in 7 days, next time visiting must be login\n    if (userProfile && typeof window !== 'undefined') {\n      if ((userProfile.expMillisecond - Date.now()) < 7 * 24 * 60 * 60 * 1000) {\n        axios.post(express_api.webRefreshTokenTraditionalUrl, {}, {\n          headers: {'Authorization': `Bearer ${token}`},\n        }).then(result => {\n          // Set cookie client\n          cookie.clientSetCookie('token', result.data.data.token, result.data.data.expMillisecond);\n        }).catch(error => {\n          console.log(error.message);\n        });\n      }\n    }\n    \n    if (!userProfile && config.url !== express_api.webLoginTraditionalUrl) {\n      // Ném ra 1 lỗi và sẽ được bắt ở catch khi gửi request. Giống như việc request trả về status khác 200.\n      // Catch trong mỗi request sẽ chạy khi status response khác 200,\n      // hoặc then ném ra 1 lỗi, hoặc ở đây (trước khi request) ném ra 1 lỗi\n      // throw new Error('token error');\n      LoginComponentEvolution.show();\n      return;\n    }\n    \n    return config;\n  }, function (error) {\n    // Không biết hàm này trigger khi nào\n    // Do something with request error\n    console.log('axios handle request error: ', error);\n    return Promise.reject(error);\n  });\n  \n  // Add a response interceptor\n  axiosInstance.interceptors.response.use(function (response) {\n    // Hàm này chạy khi có response trả về với status = 200, hàm này chạy trước rồi đến then.\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Hàm này được gọi khi request trả về status khác 200 tức là response lỗi.\n    // Sau khi hàm này chạy, catch mới chạy. Catch cũng bắt lỗi với các response có status khác 200.\n    // Do something with response error\n    return Promise.reject(error);\n  });\n  \n  return axiosInstance;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAoBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAoBA;AAGA;;;AAjGA;;;;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA3BA;AACA;AAoGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;;;;;AAIA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}